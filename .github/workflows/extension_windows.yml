name: ðŸšª Windows Extension Builds
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Global Cache Settings
# SCONS_CACHE for windows must be set in the build environment
env:
  GODOT_BASE_BRANCH: master
  SCONS_CACHE_MSVC_CONFIG: true
  SCONS_CACHE_LIMIT: 4096
  GODOT_CPP_PATH: thirdparty/godot-cpp

jobs:
  windows-editor:
    # Windows 10 with latest image
    runs-on: "windows-latest"
    name: ${{matrix.name}}

    strategy:
      matrix:
        include:
          - name: Editor Debug build
            target: debug
            tools: yes
            #cache_action: actions/cache@v2
            executable_name: libvoxel.windows.tools.debug.x86_64.dll

    steps:
      # Clone our repo
      - uses: actions/checkout@v2

      # Clone GodotCpp
      # TODO the master branch keeps diverging so it might not always compile...
      # we'd need an up-to date extension_api.json but we have to compile Godot for that -_____-
      - uses: actions/checkout@v2
        with:
          repository: godotengine/godot-cpp
          ref: master
          path: ${{env.GODOT_CPP_PATH}}

      # Upload cache on completion and check it out now
      # Editing this is pretty dangerous for Windows since it can break and needs to be properly tested with a fresh cache.
      - name: Load .scons_cache directory
        id: windows-editor-cache
        #uses: ${{matrix.cache_action}}
        uses: actions/cache@v2
        with:
          path: /.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons pywin32
          python --version
          scons --version

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: /.scons_cache/
        run: |
          scons -j2 platform=windows target=${{matrix.target}} tools=${{matrix.tools}}

      # Make build available
      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{matrix.executable_name}}
      #     path: bin/${{matrix.executable_name}}

