name: üêí Mono Builds
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global Cache Settings
env:
  GODOT_BASE_BRANCH: "4.5-stable"
  SCONS_CACHE_LIMIT_GB: 4

jobs:

  mono-glue:
    runs-on: "ubuntu-22.04"
    name: Generate Mono Glue

    steps:
      # Clone Godot
      - uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_BASE_BRANCH }}

      # Clone our module under the correct directory
      - uses: actions/checkout@v4
        with:
          path: modules/voxel

      # TODO That package no longer works, seems to have become more complicated on Godot's repo.
      #      But why was it needed actually? Now in Godot's repo, installing newer mesa has the title "Linux 
      #      dependencies for tests", and we are not going to run tests.
      # - name: Install dependencies
      #   run: |
      #     sudo add-apt-repository ppa:kisak/kisak-mesa
      #     sudo apt-get update

      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev xvfb \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: mono-glue-cache
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compile Godot (module_mono_enabled=yes mono_glue=no)
        run: |
          scons verbose=yes warnings=extra werror=yes strict_checks=yes platform=linuxbsd tests=no target=editor dev_build=no debug_symbols=no module_mono_enabled=yes mono_glue=no copy_mono_root=yes "cache_path=${{github.workspace}}/.scons_cache/" cache_limit=${{env.SCONS_CACHE_LIMIT_GB}}

      - name: Generate Mono Glue
        run: |
          ./bin/godot.linuxbsd.editor.x86_64.mono --headless --generate-mono-glue modules/mono/glue
        # run: |
        #   xvfb-run ./bin/godot.linuxbsd.editor.x86_64.mono --headless --generate-mono-glue modules/mono/glue || true

      # Make glue available as artifact for dependent jobs
      - uses: actions/upload-artifact@v4
        with:
          name: mono-glue
          path: |
            modules/mono/glue/**.gen.*
            modules/mono/glue/GodotSharp/GodotSharp/Generated/
            modules/mono/glue/GodotSharp/GodotSharpEditor/Generated/

  linux-editor-mono:
    runs-on: "ubuntu-22.04"
    name: Linux Editor w/ Mono
    needs: mono-glue

    steps:
      # Clone Godot
      - uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_BASE_BRANCH }}

      # Clone our module under the correct directory
      - uses: actions/checkout@v4
        with:
          path: modules/voxel

      # TODO That package no longer works, seems to have become more complicated on Godot's repo.
      #      But why was it needed actually? Now in Godot's repo, installing newer mesa has the title "Linux 
      #      dependencies for tests", and we are not going to run tests.
      # - name: Install dependencies
      #   run: |
      #     sudo add-apt-repository ppa:kisak/kisak-mesa
      #     sudo apt-get update

      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: linux-editor-mono-cache
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

      # Download glue from the mono-glue job
      - name: Download Glue
        uses: actions/download-artifact@v4
        with:
          name: mono-glue
          path: modules/mono/glue

      - name: Build the managed libraries
        run: |
          ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        run: |
          scons verbose=yes warnings=extra werror=yes strict_checks=yes platform=linuxbsd tests=no target=editor dev_build=no debug_symbols=no module_mono_enabled=yes mono_glue=yes mono_static=yes copy_mono_root=yes "cache_path=${{github.workspace}}/.scons_cache/"  cache_limit=${{env.SCONS_CACHE_LIMIT_GB}}

      # Make build available
      - uses: actions/upload-artifact@v4
        with:
          name: godot.linuxbsd.editor.x86_64.mono
          path: bin/*

  windows-editor-mono:
    # Windows 10 with latest image
    runs-on: "windows-latest"
    name: Windows Editor w/ Mono
    needs: mono-glue

    steps:
      # Clone Godot
      - uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_BASE_BRANCH }}

      # The version of ThorVG in 4.3-stable hits an error in latest MSVC (see godot#95861).
      # We should no longer need this in 4.3.1 and later.
      # - name: Patch ThorVG
      #   run: |
      #     curl -LO https://github.com/godotengine/godot/commit/4abc358952a69427617b0683fd76427a14d6faa8.patch
      #     git apply 4abc358952a69427617b0683fd76427a14d6faa8.patch

      # Clone our module under the correct directory
      - uses: actions/checkout@v4
        with:
          path: modules/voxel

      # Move nuget.config from voxel repo to root of checkout, so msbuild can find it
      - name: Move nuget.config
        run: mv modules/voxel/nuget.config ./nuget.config

      # Upload cache on completion and check it out now
      # Editing this is pretty dangerous for Windows since it can break and needs to be properly tested with a fresh cache.
      - name: Load .scons_cache directory
        id: windows-editor-mono-cache
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons pywin32
          python --version
          scons --version

      # Download glue from the mono-glue job
      - name: Download Glue
        uses: actions/download-artifact@v4
        with:
          name: mono-glue
          path: modules/mono/glue

      - name: Build the managed libraries
        run: |
          python ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin

      # Compile with explicit flags.
      # `PYTHONIOENCODING` was needed due to certain characters the Godot build system might print (such as '‚àû'), 
      # otherwise it makes the job fail with an encoding error.
      - name: Compilation
        env:
          SCONS_CACHE_MSVC_CONFIG: true
        run: |
          set PYTHONIOENCODING=utf8
          scons verbose=yes warnings=extra voxel_werror=yes strict_checks=yes platform=windows tests=no target=editor dev_build=no debug_symbols=no module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_static=yes "cache_path=${{github.workspace}}/.scons_cache/" cache_limit=${{env.SCONS_CACHE_LIMIT_GB}}

      # TODO Enhancement: Run tests? Such tests are able to run from Godot 4.0 only
      # Execute unit tests for the editor
      #- name: Unit Tests
      #  run: |
      #    ./bin/godot.windows.editor.x86_64.mono.exe --test

      # Make build available
      - uses: actions/upload-artifact@v4
        with:
          name: godot.windows.editor.x86_64.mono
          path: bin/*
