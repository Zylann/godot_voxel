name: 🐒 Mono Builds
on:
  push:
    branches: [ master, godot3.x, godot3.4, github_actions ]
  pull_request:
    branches: [ godot3.x, godot3.4 ]

# Global Cache Settings
env:
  GODOT_BASE_BRANCH: 3.4
  VOXEL_BASE_BRANCH: godot3.4
  SCONS_CACHE_LIMIT: 4096
  MONO_BCL_RELEASE_TAG: release-c3a9d31

jobs:
  mono-glue:
    runs-on: "ubuntu-20.04"
    name: Generate Mono Glue
    
    steps:
      - name: Get Env
        if: ${{ github.head_ref == 'refs/heads/godot3.x' || github.ref == 'refs/heads/godot3.x' }}
        run: |
          echo "GODOT_BASE_BRANCH=3.x" >> $GITHUB_ENV
          echo "VOXEL_BASE_BRANCH=godot3.x" >> $GITHUB_ENV
      - name: Get Env Branch
        if: ${{ github.head_ref == 'refs/heads/godot3.4' || github.ref == 'refs/heads/godot3.4' }}
        run: |
          echo "GODOT_BASE_BRANCH=3.4" >> $GITHUB_ENV
          echo "VOXEL_BASE_BRANCH=godot3.4" >> $GITHUB_ENV
      # Clone Godot
      - uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_BASE_BRANCH }}
          path: godot

      # Clone our module under the correct directory
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.VOXEL_BASE_BRANCH }}
          path: godot/modules/voxel

      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f godot/misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev xvfb \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm mingw-w64
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: mono-glue-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/godot/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}
      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version
      # Download Mono Build
      - name: Download Mono Build
        run: |
          curl --location https://github.com/godotengine/godot-mono-builds/releases/download/${{ env.MONO_BCL_RELEASE_TAG}}/linux-x86_64.zip -O
          unzip linux-x86_64.zip -d linux-x86_64
      - name: Download Mono BCL
        run: |
          curl --location https://github.com/godotengine/godot-mono-builds/releases/download/${{ env.MONO_BCL_RELEASE_TAG}}/bcl-desktop.zip -O
          unzip bcl-desktop.zip -d bcl-desktop
      - name: Copy Mono BCL to Build
        run: |
          mkdir linux-x86_64/desktop-linux-x86_64-release/lib/mono/4.5
          mv -f bcl-desktop/desktop-bcl/net_4_x/* linux-x86_64/desktop-linux-x86_64-release/lib/mono/4.5
      
      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compile Godot (module_mono_enabled=yes mono_glue=no)
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          cd godot
          scons -j2 use_mingw=yes verbose=yes warnings=no werror=no platform=x11 tools=yes tests=no target=release_debug debug_symbols=no module_mono_enabled=yes mono_glue=no mono_static=yes copy_mono_root=yes mono_prefix="${{github.workspace}}/linux-x86_64/desktop-linux-x86_64-release/"
      - name: Generate Mono Glue
        run: |
          cd godot
          xvfb-run ./bin/godot.x11.opt.tools.64.mono --generate-mono-glue modules/mono/glue || true
      # Make glue available as artifact for dependent jobs
      - uses: actions/upload-artifact@v2
        with:
          name: mono-glue
          path: |
            godot/modules/mono/glue/**.gen.*
            godot/modules/mono/glue/GodotSharp/GodotSharp/Generated/
            godot/modules/mono/glue/GodotSharp/GodotSharpEditor/Generated/
  generate-windows-build:
    runs-on: "ubuntu-20.04"
    name: Generate Mono Windows Build
    needs: mono-glue
    steps:

      - name: Get Env
        if: ${{ github.head_ref == 'refs/heads/master' || github.ref == 'refs/heads/master' }}
        run: |
          echo "GODOT_BASE_BRANCH=3.x" >> $GITHUB_ENV
          echo "VOXEL_BASE_BRANCH=master" >> $GITHUB_ENV
      - name: Get Env Branch
        if: ${{ github.head_ref == 'refs/heads/godot3.4' || github.ref == 'refs/heads/godot3.4' }}
        run: |
          echo "GODOT_BASE_BRANCH=3.4" >> $GITHUB_ENV
          echo "VOXEL_BASE_BRANCH=godot3.4" >> $GITHUB_ENV
      # Clone Godot
      - uses: actions/checkout@v2
        with:
          repository: Gamerfiend/godot
          ref: ${{ env.GODOT_BASE_BRANCH }}
          path: godot

      # Clone our module under the correct directory
      - uses: actions/checkout@v2
        with:
          path: godot/modules/voxel
          ref: ${{ env.VOXEL_BASE_BRANCH }}

      # Download Mono Build
      - name: Download Mono Build
        run: |
          curl --location https://github.com/godotengine/godot-mono-builds/releases/download/${{ env.MONO_BCL_RELEASE_TAG}}/windows-x86_64.zip -O
          unzip windows-x86_64.zip -d windows-x86_64
      - name: Download Mono BCL
        run: |
          curl --location https://github.com/godotengine/godot-mono-builds/releases/download/${{ env.MONO_BCL_RELEASE_TAG}}/bcl-desktop-win32.zip -O
          unzip bcl-desktop-win32.zip -d bcl-desktop-win32
      
      - name: Copy Mono BCL to Build
        run: |
          mkdir windows-x86_64/desktop-windows-x86_64-release/lib/mono/4.5
          mv -f bcl-desktop-win32/desktop-win32-bcl/net_4_x-win32/* windows-x86_64/desktop-windows-x86_64-release/lib/mono/4.5
      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f godot/misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev xvfb \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm mingw-w64
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
    
      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: mono-glue-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}
      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version
          
      # Download glue from the mono-glue job
      - name: Download Glue
        uses: actions/download-artifact@v2
        with:
          name: mono-glue
          path: godot/modules/mono/glue

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          cd godot
          scons -j2 use_mingw=yes verbose=yes warnings=no werror=no platform=windows tools=yes tests=no target=release_debug debug_symbols=no module_mono_enabled=yes mono_glue=yes mono_static=yes copy_mono_root=yes mono_prefix="${{github.workspace}}/windows-x86_64/desktop-windows-x86_64-release/"
      
      # Make build available
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.GODOT_BASE_BRANCH }}-godot-voxel-windows
          path: godot/bin/*

  generate-linux-build:
    runs-on: "ubuntu-20.04"
    name: Generate Mono Linux Build
    needs: mono-glue

    steps:
      - name: Get Env
        if: ${{ github.head_ref == 'refs/heads/master' || github.ref == 'refs/heads/master' }}
        run: |
          echo "GODOT_BASE_BRANCH=3.x" >> $GITHUB_ENV
          echo "VOXEL_BASE_BRANCH=master" >> $GITHUB_ENV
      - name: Get Env Branch
        if: ${{ github.head_ref == 'refs/heads/godot3.4' || github.ref == 'refs/heads/godot3.4' }}
        run: |
          echo "GODOT_BASE_BRANCH=3.4" >> $GITHUB_ENV
          echo "VOXEL_BASE_BRANCH=godot3.4" >> $GITHUB_ENV
      # Clone Godot
      - uses: actions/checkout@v2
        with:
          repository: Gamerfiend/godot
          ref: ${{ env.GODOT_BASE_BRANCH }}
          path: godot

      # Clone our module under the correct directory
      - uses: actions/checkout@v2
        with:
          path: godot/modules/voxel
          ref: ${{ env.VOXEL_BASE_BRANCH }}

      # Download Mono Build
      - name: Download Mono Build
        run: |
          curl --location https://github.com/godotengine/godot-mono-builds/releases/download/${{ env.MONO_BCL_RELEASE_TAG}}/linux-x86_64.zip -O
          unzip linux-x86_64.zip -d linux-x86_64
      - name: Download Mono BCL
        run: |
          curl --location https://github.com/godotengine/godot-mono-builds/releases/download/${{ env.MONO_BCL_RELEASE_TAG}}/bcl-desktop.zip -O
          unzip bcl-desktop.zip -d bcl-desktop
      - name: Copy Mono BCL to Build
        run: |
          mkdir linux-x86_64/desktop-linux-x86_64-release/lib/mono/4.5
          mv -f bcl-desktop/desktop-bcl/net_4_x/* linux-x86_64/desktop-linux-x86_64-release/lib/mono/4.5
      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f godot/misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev xvfb \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm mingw-w64
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
    
      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: mono-glue-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}
      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version
      # Download glue from the mono-glue job
      - name: Download Glue
        uses: actions/download-artifact@v2
        with:
          name: mono-glue
          path: godot/modules/mono/glue

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compile Godot (module_mono_enabled=yes mono_glue=yes)
        env: 
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          cd godot
          scons -j2 use_mingw=yes verbose=yes warnings=no werror=no platform=x11 tools=yes tests=no target=release_debug debug_symbols=no module_mono_enabled=yes mono_glue=yes mono_static=yes copy_mono_root=yes mono_prefix="${{github.workspace}}/linux-x86_64/desktop-linux-x86_64-release/"
      
      # Make build available
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.GODOT_BASE_BRANCH }}-godot-voxel-linux
          path: godot/bin/*
          