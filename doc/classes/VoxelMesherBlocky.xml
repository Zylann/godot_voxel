<?xml version="1.0" encoding="UTF-8" ?>
<class name="VoxelMesherBlocky" inherits="VoxelMesher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Produces a mesh by batching models corresponding to each voxel value, similar to games like Minecraft or StarMade.
	</brief_description>
	<description>
		Occluded faces are removed from the result, and some degree of ambient occlusion can be baked on the edges. Values are expected to be in the [constant VoxelBuffer.CHANNEL_TYPE] channel. Models are defined with a [VoxelBlockyLibrary], in which model indices correspond to the voxel values. Models don't have to be cubes.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_shadow_occluder_side" qualifiers="const">
			<return type="bool" />
			<param index="0" name="side" type="int" enum="VoxelMesherBlocky.Side" />
			<description>
			</description>
		</method>
		<method name="set_shadow_occluder_side">
			<return type="void" />
			<param index="0" name="side" type="int" enum="VoxelMesherBlocky.Side" />
			<param index="1" name="enabled" type="bool" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="library" type="VoxelBlockyLibraryBase" setter="set_library" getter="get_library">
			Library of models that will be used by this mesher. If you are using a mesher without a terrain, make sure you call [method VoxelBlockyLibraryBase.bake] before building meshes, otherwise results will be empty or out-of-date.
		</member>
		<member name="occlusion_darkness" type="float" setter="set_occlusion_darkness" getter="get_occlusion_darkness" default="0.8">
		</member>
		<member name="occlusion_enabled" type="bool" setter="set_occlusion_enabled" getter="get_occlusion_enabled" default="true">
		</member>
		<member name="shadow_occluder_negative_x" type="bool" setter="set_shadow_occluder_side" getter="get_shadow_occluder_side" default="false" experimental="">
			When enabled, generates a quad covering the negative X side of the chunk if it is fully covered by opaque voxels, in order to force directional lights to project a shadow.
		</member>
		<member name="shadow_occluder_negative_y" type="bool" setter="set_shadow_occluder_side" getter="get_shadow_occluder_side" default="false" experimental="">
			When enabled, generates a quad covering the negative Y side of the chunk if it is fully covered by opaque voxels, in order to force directional lights to project a shadow.
		</member>
		<member name="shadow_occluder_negative_z" type="bool" setter="set_shadow_occluder_side" getter="get_shadow_occluder_side" default="false" experimental="">
			When enabled, generates a quad covering the negative Z side of the chunk if it is fully covered by opaque voxels, in order to force directional lights to project a shadow.
		</member>
		<member name="shadow_occluder_positive_x" type="bool" setter="set_shadow_occluder_side" getter="get_shadow_occluder_side" default="false" experimental="">
			When enabled, generates a quad covering the positive X side of the chunk if it is fully covered by opaque voxels, in order to force directional lights to project a shadow.
		</member>
		<member name="shadow_occluder_positive_y" type="bool" setter="set_shadow_occluder_side" getter="get_shadow_occluder_side" default="false" experimental="">
			When enabled, generates a quad covering the positive Y side of the chunk if it is fully covered by opaque voxels, in order to force directional lights to project a shadow.
		</member>
		<member name="shadow_occluder_positive_z" type="bool" setter="set_shadow_occluder_side" getter="get_shadow_occluder_side" default="false" experimental="">
			When enabled, generates a quad covering the positive Z side of the chunk if it is fully covered by opaque voxels, in order to force directional lights to project a shadow.
		</member>
	</members>
	<constants>
		<constant name="SIDE_NEGATIVE_X" value="0" enum="Side">
		</constant>
		<constant name="SIDE_POSITIVE_X" value="1" enum="Side">
		</constant>
		<constant name="SIDE_NEGATIVE_Y" value="2" enum="Side">
		</constant>
		<constant name="SIDE_POSITIVE_Y" value="3" enum="Side">
		</constant>
		<constant name="SIDE_NEGATIVE_Z" value="4" enum="Side">
		</constant>
		<constant name="SIDE_POSITIVE_Z" value="5" enum="Side">
		</constant>
	</constants>
</class>
