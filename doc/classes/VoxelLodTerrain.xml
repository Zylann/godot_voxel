<?xml version="1.0" encoding="UTF-8" ?>
<class name="VoxelLodTerrain" inherits="VoxelNode" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Voxel volume using variable level of detail.
	</brief_description>
	<description>
		Renders large terrain using variable level of details. This is preferably used with smooth meshing such as [VoxelMesherTransvoxel].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="debug_dump_as_scene" qualifiers="const">
			<return type="int" />
			<param index="0" name="path" type="String" />
			<param index="1" name="include_instancer" type="bool" />
			<description>
				Saves the current state of the terrain as a Godot scene file. Can be used to inspect meshes and instances in more detail in the editor.
			</description>
		</method>
		<method name="debug_get_data_block_count" qualifiers="const">
			<return type="int" />
			<description>
				Get how many voxel data chunks are currently loaded
			</description>
		</method>
		<method name="debug_get_data_block_info" qualifiers="const">
			<return type="Dictionary" />
			<param index="0" name="block_pos" type="Vector3" />
			<param index="1" name="lod" type="int" />
			<description>
				Gets some debug information about a specific voxel data chunk.
				[codeblock]
				{
					"loading_state": int,
				}
				[/codeblock]
			</description>
		</method>
		<method name="debug_get_draw_flag" qualifiers="const">
			<return type="bool" />
			<param index="0" name="flag_index" type="int" enum="VoxelLodTerrain.DebugDrawFlag" />
			<description>
				Gets whether a specific debug drawing flag is enabled.
				This method always returns false in exported games.
			</description>
		</method>
		<method name="debug_get_mesh_block_count" qualifiers="const">
			<return type="int" />
			<description>
				Gets how many meshes the terrain currently has.
			</description>
		</method>
		<method name="debug_get_mesh_block_info" qualifiers="const">
			<return type="Dictionary" />
			<param index="0" name="block_pos" type="Vector3" />
			<param index="1" name="lod" type="int" />
			<description>
				Gets some debug information about a specific mesh.
				[codeblock]
				{
					"transition_mask": int,
					"recomputed_transition_mask": int,
					"loaded": bool,
					"meshed": bool,
					"mesh_state": int,
					"visible": bool,
					"visual_active": bool,
					"collision_active": bool
				}
				[/codeblock]
			</description>
		</method>
		<method name="debug_get_octrees_detailed" qualifiers="const">
			<return type="Array" />
			<description>
				Gets debug information about the grid of octrees used to stream the terrain at multiple levels of detail.
				The returned array contains alternating [Vector3i] and [Array] values, where each pair corresponds to one octree at a specific position:
				[codeblock]
				[
					Vector3i,
					Array,
					Vector3i,
					Array,
					...
				]
				[/codeblock]

				The array after positions contains info about one octree:
				[codeblock]
				[
					int (node state),
					null or Array (children info)
				]
				[/codeblock]
				When children info is not null, it contains 8 arrays structured the same way, and may be recursively traversed to obtain the state of every node of the octree.
			</description>
		</method>
		<method name="debug_is_draw_enabled" qualifiers="const">
			<return type="bool" />
			<description>
				Gets whether debug drawing is enabled.
				This method always returns false in exported games.
			</description>
		</method>
		<method name="debug_print_sdf_top_down">
			<return type="Array" />
			<param index="0" name="center" type="Vector3i" />
			<param index="1" name="extents" type="Vector3i" />
			<description>
				Captures a top-down representation of the signed distance field (SDF) at multiple LOD levels within a specific area. The returned array contains an image for each LOD.
			</description>
		</method>
		<method name="debug_raycast_mesh_block" qualifiers="const">
			<return type="Array" />
			<param index="0" name="origin" type="Vector3" />
			<param index="1" name="dir" type="Vector3" />
			<description>
				Gets the non-empty mesh chunk positions from a rough world-space ray, up to a distance of 256 units. All LODs are checked.
				The returned array contains:
				[codeblock]
				[
					{
						"position": Vector3i,
						"lod": int
					},
					...
				]
				[/codeblock]
			</description>
		</method>
		<method name="debug_set_draw_enabled">
			<return type="void" />
			<param index="0" name="enabled" type="bool" />
			<description>
				Enables or disables debug drawing.
				This method does nothing in exported games.
			</description>
		</method>
		<method name="debug_set_draw_flag">
			<return type="void" />
			<param index="0" name="flag_index" type="int" enum="VoxelLodTerrain.DebugDrawFlag" />
			<param index="1" name="enabled" type="bool" />
			<description>
				Sets a specific debug drawing flag. Note that debug drawing must also be enabled for it to be visible.
				This method does nothing in exported games.
			</description>
		</method>
		<method name="get_data_block_region_extent" qualifiers="const">
			<return type="int" />
			<description>
			</description>
		</method>
		<method name="get_data_block_size" qualifiers="const">
			<return type="int" />
			<description>
				Gets the size of one cunic data block in voxels.
			</description>
		</method>
		<method name="get_normalmap_generator_override" qualifiers="const">
			<return type="VoxelGenerator" />
			<description>
			</description>
		</method>
		<method name="get_normalmap_generator_override_begin_lod_index" qualifiers="const">
			<return type="int" />
			<description>
			</description>
		</method>
		<method name="get_process_callback" qualifiers="const">
			<return type="int" enum="VoxelLodTerrain.ProcessCallback" />
			<description>
				Gets which callback is used to run the main thread update of this node.
			</description>
		</method>
		<method name="get_statistics" qualifiers="const">
			<return type="Dictionary" />
			<description>
				Gets debug information about how much time is spent processing the terrain.
				The returned dictionary has the following structure:
				[codeblock]
				{
					"time_detect_required_blocks": int,
					"time_request_blocks_to_load": int,
					"time_process_load_responses": int,
					"time_request_blocks_to_update": int,
					"time_process_update_responses": int,
					"remaining_main_thread_blocks": int,
					"dropped_block_loads": int,
					"dropped_block_meshs": int,
					"updated_blocks": int,
					"blocked_lods": int
				}
				[/codeblock]
			</description>
		</method>
		<method name="get_voxel_tool">
			<return type="VoxelTool" />
			<description>
				Gets an instance of [VoxelTool] bound to this volume. Allows to query and edit voxels.
			</description>
		</method>
		<method name="is_area_meshed" qualifiers="const">
			<return type="bool" />
			<param index="0" name="area_in_voxels" type="AABB" />
			<param index="1" name="lod_index" type="int" />
			<description>
				Returns true if the area has been processed by meshing. It does not mean the area actually contains a mesh.
				Returns false if the area has not been processed by meshing (therefore it is unknown whethere there should be a mesh here or not).
				When streaming terrain, this can be used to determine if an area has fully "loaded", in case the game relies meshes or mesh colliders.
			</description>
		</method>
		<method name="save_modified_blocks">
			<return type="void" />
			<description>
				Requests saving of all modified voxels. Saving is asynchronous and will complete some time in the future. If the game quits, the engine will ensure saving tasks get completed before the application shuts down.
				There is currently no reliable way to tell if saving has completed.
				Note that blocks getting unloaded as the viewer moves around can also trigger saving tasks, independently from this function.
			</description>
		</method>
		<method name="set_normalmap_generator_override">
			<return type="void" />
			<param index="0" name="generator_override" type="VoxelGenerator" />
			<description>
			</description>
		</method>
		<method name="set_normalmap_generator_override_begin_lod_index">
			<return type="void" />
			<param index="0" name="lod_index" type="int" />
			<description>
			</description>
		</method>
		<method name="set_process_callback">
			<return type="void" />
			<param index="0" name="mode" type="int" enum="VoxelLodTerrain.ProcessCallback" />
			<description>
				Sets which process callback is used to run the main thread update of this node. By default, it uses [code]_process[/code].
			</description>
		</method>
		<method name="voxel_to_data_block_position" qualifiers="const">
			<return type="Vector3i" />
			<param index="0" name="voxel_position" type="Vector3" />
			<param index="1" name="lod_index" type="int" />
			<description>
				Converts a voxel position into a data block position for a specific LOD index.
			</description>
		</method>
		<method name="voxel_to_mesh_block_position" qualifiers="const">
			<return type="Vector3i" />
			<param index="0" name="voxel_position" type="Vector3" />
			<param index="1" name="lod_index" type="int" />
			<description>
				Converts a voxel position into a mesh block position for a specific LOD index.
			</description>
		</method>
	</methods>
	<members>
		<member name="collision_layer" type="int" setter="set_collision_layer" getter="get_collision_layer" default="1">
			Collision layer used by generated colliders. Check Godot documentation for more information.
		</member>
		<member name="collision_lod_count" type="int" setter="set_collision_lod_count" getter="get_collision_lod_count" default="0">
			How many LOD levels are set to generate colliders, starting from LOD 0.
		</member>
		<member name="collision_margin" type="float" setter="set_collision_margin" getter="get_collision_margin" default="0.04">
			Collision margin used by generated colliders. Note that it may depend on which physics engine is used under the hood, as some don't use margins.
		</member>
		<member name="collision_mask" type="int" setter="set_collision_mask" getter="get_collision_mask" default="1">
			Collision mask used by generated colliders. Check Godot documentation for more information.
		</member>
		<member name="collision_update_delay" type="int" setter="set_collision_update_delay" getter="get_collision_update_delay" default="0">
			How long to wait before updating colliders after an edit, in milliseconds. Collider generation is expensive, so the intent is to smooth it out.
		</member>
		<member name="full_load_mode_enabled" type="bool" setter="set_full_load_mode_enabled" getter="is_full_load_mode_enabled" default="false">
			If enabled, data streaming will be turned off, and all voxel data will be loaded from the [member stream] into memory.
			This removes several constraints, such as being able to edit anywhere and allowing distant normalmaps to include edited regions. This comes at the expense of more memory usage. However, only edited regions use memory, so in practice it can be good enough.
		</member>
		<member name="generate_collisions" type="bool" setter="set_generate_collisions" getter="get_generate_collisions" default="true">
			If enabled, chunked colliders will be generated from meshes.
		</member>
		<member name="lod_count" type="int" setter="set_lod_count" getter="get_lod_count" default="4">
			How many LOD levels to use. This should be tuned alongside [member lod_distance]: if you want to see very far, you need more LOD levels. This allows blocks to become larger the further away they are, to keep their numbers to an acceptable amount. In contrast, too few LOD levels means regions far away will have to use too many small blocks, which can affect performance.
		</member>
		<member name="lod_distance" type="float" setter="set_lod_distance" getter="get_lod_distance" default="48.0">
			How far LOD 0 extends from the viewer. Each parent LOD will extend twice as far as their children LOD levels. When [member full_load_mode_enabled] is disabled, this also defines how far edits are allowed.
		</member>
		<member name="lod_fade_duration" type="float" setter="set_lod_fade_duration" getter="get_lod_fade_duration" default="0.0">
			When set greater than 0, enables LOD fading. When mesh blocks get split/merged as level of detail changes, they will fade to make the transition less noticeable (or at least more pleasant). This feature requires to use a specific shader, check the online documentation or examples for more information.
		</member>
		<member name="material" type="Material" setter="set_material" getter="get_material">
			Material used for the surface of the volume. The main usage of this node is with smooth voxels, which means if you want more than one "material" on the ground, you need to use splatmapping techniques with a shader. In addition, many features require shaders to work properly. Check the online documentation or examples for more information.
		</member>
		<member name="mesh_block_size" type="int" setter="set_mesh_block_size" getter="get_mesh_block_size" default="16">
			Size of meshes used for chunks of this volume, in voxels. Can only be set to either 16 or 32. Using 32 is expected to increase rendering performance, and slightly increase the cost of edits.
		</member>
		<member name="normalmap_begin_lod_index" type="int" setter="set_normalmap_begin_lod_index" getter="get_normalmap_begin_lod_index" default="2">
			From which LOD index normalmaps will be generated. There won't be normalmaps below this index.
		</member>
		<member name="normalmap_enabled" type="bool" setter="set_normalmap_enabled" getter="is_normalmap_enabled" default="false">
			Enables generation of distant normalmaps. This is a feature used with smooth terrain only (SDF). It is an expensive feature but allows to bring a lot more detail to distant ground.
			This feature requires to use a specific shader, check the online documentation or examples for more information.
		</member>
		<member name="normalmap_max_deviation_degrees" type="int" setter="set_normalmap_max_deviation_degrees" getter="get_normalmap_max_deviation_degrees" default="60">
		</member>
		<member name="normalmap_octahedral_encoding_enabled" type="bool" setter="set_octahedral_normal_encoding" getter="get_octahedral_normal_encoding" default="false">
			Enables octahedral compression of normalmaps, which reduces memory usage caused by distant normalmaps by about 33%, with some impact on visual quality. Your shader may be modified accordingly to decode them.
		</member>
		<member name="normalmap_tile_resolution_max" type="int" setter="set_normalmap_tile_resolution_max" getter="get_normalmap_tile_resolution_max" default="8">
			Maximum resolution of tiles in distant normalmaps.
		</member>
		<member name="normalmap_tile_resolution_min" type="int" setter="set_normalmap_tile_resolution_min" getter="get_normalmap_tile_resolution_min" default="4">
			Minimum resolution of tiles in distant normalmaps.
			This is the resolution at which normalmaps will begin with, at the LOD level defined in [member normalmap_begin_lod_index]. Resolutions will double at each LOD level, until they reach [member normalmap_tile_resolution_max].
		</member>
		<member name="normalmap_use_gpu" type="bool" setter="set_normalmap_use_gpu" getter="get_normalmap_use_gpu" default="false">
			Enables GPU detail normalmaps generation, which can speed it up. This is only valid for generators that support it. Vulkan is required.
		</member>
		<member name="run_stream_in_editor" type="bool" setter="set_run_stream_in_editor" getter="is_stream_running_in_editor" default="true">
			Sets wether the [member generator] and the [member stream] will run in the editor. This setting may turn on automatically if either contain a script, as multithreading can clash with script reloading in unexpected ways.
		</member>
		<member name="threaded_update_enabled" type="bool" setter="set_threaded_update_enabled" getter="is_threaded_update_enabled" default="false">
			When enabled, this node will run a large part of its update cycle in a separate thread. Otherwise, it will run on the main thread.
		</member>
		<member name="use_gpu_generation" type="bool" setter="set_generator_use_gpu" getter="get_generator_use_gpu" default="false">
			Enables GPU block generation, which can speed it up. This is only valid for generators that support it. Vulkan is required.
		</member>
		<member name="view_distance" type="int" setter="set_view_distance" getter="get_view_distance" default="512">
			Maximum distance where terrain will load around viewers. If your terrain size is finite (like for a planet) and you want to keep it in view, you may want to set this value to a very large number. This is mainly useful for infinite terrains.
		</member>
		<member name="voxel_bounds" type="AABB" setter="set_voxel_bounds" getter="get_voxel_bounds" default="AABB(-5.36871e+08, -5.36871e+08, -5.36871e+08, 1.07374e+09, 1.07374e+09, 1.07374e+09)">
			Bounds within which volume data can exist (loaded or not), in voxels. By default, it is pseudo-infinite. If you make a planet, island or some sort of arena, you may want to choose a finite size.
			Note, because this volume uses chunks with LOD, these bounds will snap to the closest chunk boundary.
		</member>
	</members>
	<constants>
		<constant name="PROCESS_CALLBACK_IDLE" value="0" enum="ProcessCallback">
			The node will use [code]_process[/code] for the part of its logic running on the main thread.
		</constant>
		<constant name="PROCESS_CALLBACK_PHYSICS" value="1" enum="ProcessCallback">
			The node will use [code]_physics_process[/code] for the part of its logic running on the main thread.
		</constant>
		<constant name="PROCESS_CALLBACK_DISABLED" value="2" enum="ProcessCallback">
			The node will not update. Use with caution!
		</constant>
		<constant name="DEBUG_DRAW_OCTREE_NODES" value="0" enum="DebugDrawFlag">
		</constant>
		<constant name="DEBUG_DRAW_OCTREE_BOUNDS" value="1" enum="DebugDrawFlag">
		</constant>
		<constant name="DEBUG_DRAW_MESH_UPDATES" value="2" enum="DebugDrawFlag">
		</constant>
		<constant name="DEBUG_DRAW_EDIT_BOXES" value="3" enum="DebugDrawFlag">
		</constant>
		<constant name="DEBUG_DRAW_VOLUME_BOUNDS" value="4" enum="DebugDrawFlag">
		</constant>
		<constant name="DEBUG_DRAW_EDITED_BLOCKS" value="5" enum="DebugDrawFlag">
		</constant>
		<constant name="DEBUG_DRAW_MODIFIER_BOUNDS" value="6" enum="DebugDrawFlag">
		</constant>
		<constant name="DEBUG_DRAW_FLAGS_COUNT" value="7" enum="DebugDrawFlag">
		</constant>
	</constants>
</class>
