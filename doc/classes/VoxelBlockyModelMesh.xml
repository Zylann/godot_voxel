<?xml version="1.0" encoding="UTF-8" ?>
<class name="VoxelBlockyModelMesh" inherits="VoxelBlockyModel" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Generates a model based on a custom mesh.
	</brief_description>
	<description>
		[VoxelMesherBlocky] does not require models to be cubes. Ultimately, model visuals are all meshes. This is the most versatile option to make a model. The workflow is to make these models in a 3D editor such as Blender, making sure they are confined in a box going from (0,0) to (1,1). Textures are assigned with classic UV-mapping.
	</description>
	<tutorials>
	</tutorials>
	<members>
		<member name="mesh" type="Mesh" setter="set_mesh" getter="get_mesh">
			Mesh that will be used for this model. Must not be empty (if you want an empty model, use [VoxelBlockyModelEmpty]). If it has more than 2 surfaces (2 materials) the next surfaces will be ignored. Surfaces must be made of triangles. Must be indexed (if you generate meshes with [SurfaceTool], use [method SurfaceTool.index]). Should ideally contain geometry within a 0..1 area. Only triangles located on the sides of that cubic area will be considered for neighbor side culling (see also [member side_vertex_tolerance]).
		</member>
		<member name="mesh_ortho_rotation_index" type="int" setter="set_mesh_ortho_rotation_index" getter="get_mesh_ortho_rotation_index" default="0">
			Orthogonal rotation applied to the mesh when baking. Values are taken from the same convention as [GridMap] tiles.
			([GridMap] provides a conversion method from [Basis], unfortunately it is not a static method so it requires a [GridMap] instance to exist. A helper method could be added in the future if requested)
		</member>
		<member name="side_vertex_tolerance" type="float" setter="set_side_vertex_tolerance" getter="get_side_vertex_tolerance" default="0.001">
			Margin below which triangles located near one of the 6 sides of the voxel will be considered on that side. Sides get culled or not by comparing between triangles of neighbor sides.
		</member>
	</members>
</class>
