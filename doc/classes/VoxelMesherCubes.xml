<?xml version="1.0" encoding="UTF-8" ?>
<class name="VoxelMesherCubes" inherits="VoxelMesher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Generates a cubic voxels mesh from colors.
	</brief_description>
	<description>
		Builds meshes representing cubic voxels, based on color values stored in the [constant VoxelBuffer.CHANNEL_COLOR] channel. 
		Colors will usually be stored in the [code]COLOR[/code] vertex attribute and may require a material with vertex colors enabled, or a custom shader.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="generate_mesh_from_image" qualifiers="static">
			<return type="Mesh" />
			<param index="0" name="image" type="Image" />
			<param index="1" name="voxel_size" type="float" />
			<description>
				Generates a 1-voxel thick greedy mesh from pixels of an image.
			</description>
		</method>
		<method name="set_material_by_index">
			<return type="void" />
			<param index="0" name="id" type="int" enum="VoxelMesherCubes.Materials" />
			<param index="1" name="material" type="Material" />
			<description>
				Sets one of the materials that will be used when building meshes. This is equivalent to using either [member opaque_material] or [member transparent_material].
			</description>
		</method>
	</methods>
	<members>
		<member name="color_mode" type="int" setter="set_color_mode" getter="get_color_mode" enum="VoxelMesherCubes.ColorMode" default="0">
			Sets how voxel color is determined when building the mesh.
		</member>
		<member name="greedy_meshing_enabled" type="bool" setter="set_greedy_meshing_enabled" getter="is_greedy_meshing_enabled" default="true">
			Enables greedy meshing: the mesher will attempt to merge contiguous faces having the same color to reduce the number of polygons.
		</member>
		<member name="opaque_material" type="Material" setter="_set_opaque_material" getter="_get_opaque_material">
			Material that will be used for opaque parts of the mesh.
		</member>
		<member name="palette" type="VoxelColorPalette" setter="set_palette" getter="get_palette">
			Palette that will be used when using the [constant COLOR_MESHER_PALETTE] color mode.
		</member>
		<member name="transparent_material" type="Material" setter="_set_transparent_material" getter="_get_transparent_material">
			Material that will be used for transparent parts of the mesh (colors where alpha is not set to max).
		</member>
	</members>
	<constants>
		<constant name="MATERIAL_OPAQUE" value="0" enum="Materials">
			Index of the opaque material.
		</constant>
		<constant name="MATERIAL_TRANSPARENT" value="1" enum="Materials">
			Index of the transparent material.
		</constant>
		<constant name="MATERIAL_COUNT" value="2" enum="Materials">
			Maximum number of materials.
		</constant>
		<constant name="COLOR_RAW" value="0" enum="ColorMode">
			Voxel values will be directly interpreted as colors.
			8-bit voxels are interpreted as [code]rrggbbaa[/code] (2 bits per component) where the range per component is converted from 0..3 to 0..255.
			16-bit voxels are interpreted as [code]rrrrgggg bbbbaaaa[/code] (4 bits per component) where the range per component is converted from 0..15 to 0..255.
			32-bit voxels are interpreted as [code]rrrrrrrr gggggggg bbbbbbbb aaaaaaaa[/code] (8 bits per component) where each component is in 0..255.
		</constant>
		<constant name="COLOR_MESHER_PALETTE" value="1" enum="ColorMode">
			Voxel values will be interpreted as indices within the color palette assigned in the [member palette] property.
		</constant>
		<constant name="COLOR_SHADER_PALETTE" value="2" enum="ColorMode">
			Voxel values will be directly written as such in the mesh, instead of colors.
			They are written in the red component of the [code]COLOR[/code], leaving red and blue to zero. Note, it will be normalized to 0..1 in shader, so if you need the integer value back you may use [code]int(COLOR.r * 255.0)[/code].
			The alpha component will be set to the transparency of the corresponding color in [member palette] (a palette resource is still needed to differenciate transparent parts; RGB values are not used).
			You are expected to use a [ShaderMaterial] to read vertex data and choose the actual color with a custom shader. [StandardMaterial] will not work with this mode.
		</constant>
	</constants>
</class>
